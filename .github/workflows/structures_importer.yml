name: Structure Import

on:
  schedule:
    - cron: '30 0 * * *'  # Runs daily at 00:30
  workflow_dispatch:  # Manual trigger

jobs:
  import-structures:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download dataset IDs
      uses: dawidd6/action-download-artifact@v4
      with:
        name: dataset_ids
        workflow: OGD_OFS.yml
        workflow_conclusion: success
        path: OGD_OFS/data
    
    - name: Download harvest log
      uses: dawidd6/action-download-artifact@v4
      with:
        name: harvest-log
        workflow: OGD_OFS.yml
        workflow_conclusion: success
        path: .
        if_no_artifact_found: warn
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: pip install requests rdflib python-dateutil chardet
    
    - name: Get initial access token
      id: get-token
      env:
        CLIENT_ID_ABN: ${{ secrets.CLIENT_ID_ABN }}
        CLIENT_SECRET_ABN: ${{ secrets.CLIENT_SECRET_ABN }}
      run: |
        python - <<EOF
        import requests
        import os
    
        def get_access_token(client_id, client_secret):
            data = {'grant_type': 'client_credentials'}
            response = requests.post(
                "https://identity-a.bit.admin.ch/realms/bfs-sis-a/protocol/openid-connect/token",
                data=data,
                verify=False,
                auth=(client_id, client_secret)
            )
            if response.status_code >= 400:
                raise Exception("Failed to get token")
            return response.json()
   
        client_id = os.environ['CLIENT_ID_ABN']
        client_secret = os.environ['CLIENT_SECRET_ABN']
        response = get_access_token(client_id, client_secret)
        if 'access_token' not in response:
            raise Exception("Failed to get access token")
        access_token = 'Bearer ' + response['access_token']
      
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"access_token={access_token}\n")
        EOF
    
    - name: Run extensible structure import
      env:
        ACCESS_TOKEN: ${{ steps.get-token.outputs.access_token }}
        CLIENT_ID_ABN: ${{ secrets.CLIENT_ID_ABN }}
        CLIENT_SECRET_ABN: ${{ secrets.CLIENT_SECRET_ABN }}
        PYTHONPATH: ./src  # Add the src directory to the Python path
      run: |
        python - <<EOF
        import os
        import time
        import requests
        from structure_importer import StructureImporter

        def refresh_token(client_id, client_secret):
            data = {'grant_type': 'client_credentials'}
            response = requests.post(
                "https://identity-a.bit.admin.ch/realms/bfs-sis-a/protocol/openid-connect/token",
                data=data,
                verify=False,
                auth=(client_id, client_secret)
            )
            if response.status_code >= 400:
                raise Exception("Failed to refresh token")
            return 'Bearer ' + response.json()['access_token']

        # Initialize token and importer
        access_token = os.environ['ACCESS_TOKEN']
        client_id = os.environ['CLIENT_ID_ABN']
        client_secret = os.environ['CLIENT_SECRET_ABN']
        importer = StructureImporter(access_token)

        # Simulate long-running process with token refresh
        start_time = time.time()
        while True:
            elapsed_time = time.time() - start_time
            if elapsed_time > 1200:  # Refresh token every 20 minutes
                access_token = refresh_token(client_id, client_secret)
                importer.update_token(access_token)
                start_time = time.time()  # Reset timer

            # Run the import process
            importer.run_import()
        EOF
    
    - name: Upload log
      uses: actions/upload-artifact@v4
      with:
        name: structure-import-log
        path: structure_import_log.txt