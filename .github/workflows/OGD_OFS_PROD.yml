name: PROD - I14Y Harvester OGD Office Fédéral de Statistique catalogue 

on:
  schedule:
    - cron: '0 0 * * *'  # Runs everyday at midnight
  workflow_dispatch:  # Allows manual triggering

jobs:
  harvest-data:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download previous data
      uses: dawidd6/action-download-artifact@v4
      continue-on-error: true
      with:
          name: dataset_ids
          workflow: OGD_OFS_PROD.yml
          workflow_conclusion: success
          if_no_artifact_found: warn
          path: OGD_OFS/data
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Get access token (debug)
      id: get-token
      env:
        CLIENT_ID_PROD: ${{ secrets.CLIENT_ID_PROD }}
        CLIENT_SECRET_PROD: ${{ secrets.CLIENT_SECRET_PROD }}
      run: |
        python - <<EOF
        import requests, os, sys
        from urllib3.exceptions import InsecureRequestWarning
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
    
        def debug_request(response):
            print(f"Status: {response.status_code}")
            print(f"Headers: {response.headers}")
            print(f"Body: {response.text[:200]}...")
    
        try:
            response = requests.post(
                "https://identity.bit.admin.ch/realms/bfs-sis-p/protocol/openid-connect/token",
                data={'grant_type': 'client_credentials'},
                auth=(os.environ['CLIENT_ID_PROD'], os.environ['CLIENT_SECRET_PROD']),
                verify=False,
                timeout=10
            )
            
            debug_request(response)  # Print debug info
            response.raise_for_status()
            
            token = response.json().get('access_token')
            if not token:
                raise ValueError("No access_token in response")
                
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write(f"access_token=Bearer {token}\n")
                
        except Exception as e:
            print(f"::error::Token request failed: {str(e)}")
            sys.exit(1)
        EOF
        
    - name: Run harvester script
      env:
        ACCESS_TOKEN: ${{ steps.get-token.outputs.access_token }}
      run: python src/harvester_PROD.py
    
    - name: Upload log
      uses: actions/upload-artifact@v4
      with:
        name: harvest-log
        path: harvest_log.txt

    - name: Upload updated data
      uses: actions/upload-artifact@v4
      with:
        name: dataset_ids
        path: OGD_OFS/data/dataset_ids.json
        retention-days: 2









